var
  PlayerUnits: Integer;
  DiedUnits1: Integer;
  DiedUnits2: Integer;
  Podkr: Integer;
  Podkrkn: Integer;
  Group1: Integer;
  Group2: Integer;
  Group3: Integer;
  Group4: Integer;
  ReinforcementT: Integer;
  Time1: Integer;
  PX: Integer;
  PXS: Integer;
  Storehouses: array of Integer;
  Schoolhouses: array of Integer;
  Barracks: array of Integer;
  STENEMY: array of Integer;
  Flag0: Integer;
  Flag1: Integer;
  TimeCount: Integer;
  TimeCount9: Integer;
  Time: Integer;
  Time9: Integer;
  L1: Integer;
  L2: Integer;
  L3: Integer;
  L4: Integer;
  FlagAt: Integer;
  At: Integer;
  Pos: TKMPoint;
  J: Integer;
  JT: Integer;

{$I DamageCloseBuildings.script}
{$I AccurateTowers.script}

procedure OnMissionStart;
var
  H: array of Integer;
  H1: array of Integer;
  H2: array of Integer;
  H3: array of Integer;
  I: Integer;
  I1: Integer;
  I2: Integer;
  I3: Integer;
begin
  begin
   DCB_Mode:= DCB_ALL;
   Flag0:= 0;
   ReinforcementT:= 0;
   Time1:= 13400;
   FlagAt:= 0;
   J:= 0;
  end;


  begin
  H:= States.PlayerGetAllHouses(0);
    for I := 0 to Length(H) - 1 do
    if States.HouseType(H[I]) = 11 then
    begin
      SetLength(Storehouses, Length(Storehouses)+1);
      Storehouses[Length(Storehouses)-1] := H[I];
    end;
  end;

  begin
  H1:= States.PlayerGetAllHouses(0);
    for I1 := 0 to Length(H1) - 1 do
    if States.HouseType(H1[I1]) = 13 then
    begin
      SetLength(Schoolhouses, Length(Schoolhouses)+1);
      Schoolhouses[Length(Schoolhouses)-1] := H1[I1];
    end;
  end;

  begin
  H2 := States.PlayerGetAllHouses(0);
    for I2 := 0 to Length(H2) - 1 do
    if States.HouseType(H2[I2]) = 21 then
    begin
      SetLength(Barracks, Length(Barracks)+1);
      Barracks[Length(Barracks)-1] := H2[I2];
    end;
 end;

 case States.MissionDifficulty of
  mdHard3:
   begin
     begin
     PlayerUnits:= 1000;
     Time1:= 18200;
     end;

   end;
 end;

 begin
  case States.MissionDifficulty of
   mdHard3:
    begin


     begin
      H3:= States.PlayerGetAllHouses(11);
     for I3 := 0 to Length(H3) - 1 do
     if States.HouseType(H3[I3]) = 11 then
      begin
       SetLength(STENEMY, Length(STENEMY)+1);
       STENEMY[Length(STENEMY)-1] := H3[I3];
      end;
     end;

     begin
     Actions.HouseAddWaresTo(STENEMY[0], 17, 50);
     Actions.HouseAddWaresTo(STENEMY[0], 19, 50);
     Actions.HouseAddWaresTo(STENEMY[0], 21, 50);
     Actions.HouseAddWaresTo(STENEMY[0], 26, 50);
     end;

    end;

  end;
 end;

end;

function POSX: Integer;
begin
  case States.KamRandomI(2) of
    0:result:=55;
    1:result:=114;
  end;
end;

function POSX1: Integer;
begin
  case States.KamRandomI(3) of
    0:result:=1;
    1:result:=2;
    2:result:=3;
  end;
end;

function Lim: Integer;
begin
  case States.KamRandomI(3) of
    0:result:=1;
    1:result:=2;
    2:result:=3;
  end;
end;



procedure RemoveStorehouse(aHouse: Integer);
var
  indexToRemove: Integer;
  I: Integer;
begin
  indexToRemove := -1;
  for I := 0 to Length(Storehouses)- 1 do
  if Storehouses[I] = aHouse then
      indexToRemove := I;


  for I := indexToRemove to Length(Storehouses) - 2 do
   Storehouses[I] := Storehouses[I+1];


  SetLength(Storehouses, Length(Storehouses)-1);
end;

procedure RemoveSchoolhouse(aHouse: Integer);
var
  indexToRemove: Integer;
  I1: Integer;
begin
  indexToRemove := -1;
  for I1 := 0 to Length(Schoolhouses)- 1 do
  if Schoolhouses[I1] = aHouse then
      indexToRemove := I1;


  for I1 := indexToRemove to Length(Schoolhouses) - 2 do
   Schoolhouses[I1] := Schoolhouses[I1+1];


  SetLength(Schoolhouses, Length(Schoolhouses)-1);
end;

procedure RemoveBarracks(aHouse: Integer);
var
  indexToRemove: Integer;
  I2: Integer;
begin
  indexToRemove := -1;
  for I2 := 0 to Length(Barracks)- 1 do
  if Barracks[I2] = aHouse then
      indexToRemove := I2;


  for I2 := indexToRemove to Length(Barracks) - 2 do
   Barracks[I2] := Barracks[I2+1];


  SetLength(Barracks, Length(Barracks)-1);

end;


procedure OnHouseBuilt(House: Integer);
begin
  if (States.HouseType(House) = 11) and (States.HouseOwner(House) = 0) then
  begin
    SetLength(Storehouses, length(Storehouses)+1);
    Storehouses[length(Storehouses)-1]:= House;
  end;

  if (States.HouseType(House) = 13) and (States.HouseOwner(House) = 0) then
  begin
    SetLength(Schoolhouses, length(Schoolhouses)+1);
    Schoolhouses[length(Schoolhouses)-1]:= House;
  end;

  if (States.HouseType(House) = 21) and (States.HouseOwner(House) = 0) then
  begin
    SetLength(Barracks, length(Barracks)+1);
    Barracks[length(Barracks)-1]:= House;
  end;
end;


procedure OnHouseDestroyed(aHouse: Integer; aDestroyerIndex: Integer);
begin
 begin
  if ((States.HouseType(aHouse) = 11) or (States.HouseType(aHouse) = 13) or (States.HouseType(aHouse) = 21)) and (States.HouseOwner(aHouse) = 0) and (States.HouseIsComplete(aHouse) = true)  then
  begin
  Actions.AIAttackRemoveAll(8);
  Flag0:= Flag0 + 1;
  Flag1:= 0;
  end;
 end;

  begin
  if (States.HouseType(aHouse) = 11) and (States.HouseOwner(aHouse) = 0) and (States.HouseIsComplete(aHouse) = true) then
   begin
   RemoveStorehouse(aHouse);
   end else
  if (States.HouseType(aHouse) = 13) and (States.HouseOwner(aHouse) = 0) and (States.HouseIsComplete(aHouse) = true) then
   begin
   RemoveSchoolhouse(aHouse);
   end else
  if (States.HouseType(aHouse) = 21) and (States.HouseOwner(aHouse) = 0) and (States.HouseIsComplete(aHouse) = true) then
   begin
   RemoveBarracks(aHouse);
   end;
  end;
end;

procedure OnUnitDied(aUnitID: Integer; aKillerOwner: Integer);
var
I: Integer;
begin

  if States.UnitType(aUnitID) = 21 then
    if aKillerOwner = 0 then
     if States.UnitOwner(aUnitID) = 11 then
       DiedUnits1 := DiedUnits1 + 1;
  if States.UnitType(aUnitID) = 22 then
    if aKillerOwner = 0 then
     if States.UnitOwner(aUnitID) = 11 then
       DiedUnits1 := DiedUnits1 + 1;

  if DiedUnits1 >= 24 then
   begin
    PX:=POSX;
    if (Utils.RandomRangeI(1,2) = 1) and (PX = 55) then
    begin
      Podkr := Actions.GiveGroup(3, 27, PX, 5, 4, Utils.RandomRangeI(2,6) + 2*TimeCount,3);
      Podkrkn := Actions.GiveGroup(3, 22, PX, 5, 4, Utils.RandomRangeI(1,5)+TimeCount,3+TimeCount/5);
      DiedUnits1 := 0;
      L1:= L1 + 1;
    end else
    if (Utils.RandomRangeI(1,2) = 1) and (PX = 114) then
    begin
      Podkr := Actions.GiveGroup(3, 27, PX, 103, 7, Utils.RandomRangeI(2,6)+ 2*TimeCount,3);
      Podkrkn := Actions.GiveGroup(3, 22, PX, 103, 7, Utils.RandomRangeI(1,5)+TimeCount,3+TimeCount/5);
      DiedUnits1 := 0;
      L2:= L2 + 1;
    end else
    if (Utils.RandomRangeI(1,2) = 2) and (PX = 55) then
    begin
      Podkr := Actions.GiveGroup(3, 21, PX, 5, 4, Utils.RandomRangeI(1,5)+TimeCount,3+TimeCount/5);
      Podkrkn := Actions.GiveGroup(3, 22, PX, 5, 4, Utils.RandomRangeI(1,4)+TimeCount,3+TimeCount/5);
      DiedUnits1 := 0;
      L3:= L3 + 1;
    end else
    if (Utils.RandomRangeI(1,2) = 2) and (PX = 114) then
    begin
      Podkr := Actions.GiveGroup(3, 21, PX, 103, 7, Utils.RandomRangeI(1,5)+TimeCount,3+TimeCount/5);
      Podkrkn := Actions.GiveGroup(3, 22, PX, 103, 7, Utils.RandomRangeI(1,4)+TimeCount,3+TimeCount/5);
      DiedUnits1 := 0;
      L4:= L4 + 1;
    end;
  end;

   if States.UnitType(aUnitID) = 21 then
    if aKillerOwner = 0 then
     if States.UnitOwner(aUnitID) = 7 then
       DiedUnits2 := DiedUnits2 + 1;
  if States.UnitType(aUnitID) = 22 then
    if aKillerOwner = 0 then
     if States.UnitOwner(aUnitID) = 7 then
       DiedUnits2 := DiedUnits2 + 1;
  if States.UnitType(aUnitID) = 15 then
    if aKillerOwner = 0 then
     if States.UnitOwner(aUnitID) = 7 then
       DiedUnits2 := DiedUnits2 + 1;
  if States.UnitType(aUnitID) = 16 then
    if aKillerOwner = 0 then
     if States.UnitOwner(aUnitID) = 7 then
       DiedUnits2 := DiedUnits2 + 1;
  if States.UnitType(aUnitID) = 17 then
    if aKillerOwner = 0 then
     if States.UnitOwner(aUnitID) = 7 then
       DiedUnits2 := DiedUnits2 + 1;
  if States.UnitType(aUnitID) = 18 then
    if aKillerOwner = 0 then
     if States.UnitOwner(aUnitID) = 7 then
       DiedUnits2 := DiedUnits2 + 1;

  if DiedUnits2 >= 112 then
  begin
      Flag0:= Flag0 + 1;
      PXS:= POSX1;
      if PXS = 1 then
      begin
      Podkr := Actions.GiveGroup(8, 15, 138, 4, 4, Utils.RandomRangeI(6,9)+TimeCount9,4+TimeCount/6);
      Podkrkn := Actions.GiveGroup(8, 16, 138, 4, 4, Utils.RandomRangeI(2,6)+TimeCount9,4+TimeCount/6);
      Actions.GroupOrderLink(Podkr,Podkrkn);

      Group1 := Actions.GiveGroup(8, 15, 28, 5, 4, Utils.RandomRangeI(6,9)+TimeCount9,4+TimeCount/6);
      Group2 := Actions.GiveGroup(8, 16, 28, 5, 4, Utils.RandomRangeI(2,6)+TimeCount9,4+TimeCount/6);
      Actions.GroupOrderLink(Group1,Group2);

      Group3 := Actions.GiveGroup(8, 15, 98, 5, 4, Utils.RandomRangeI(6,9)+TimeCount9,4+TimeCount/6);
      Group4 := Actions.GiveGroup(8, 16, 98, 5, 4, Utils.RandomRangeI(2,6)+TimeCount9,4+TimeCount/6);
      Actions.GroupOrderLink(Group3,Group4);
      DiedUnits2 := 0;
      Flag0:= Flag0 + 1;
      end else
      if PXS = 2 then
      begin
      Podkr := Actions.GiveGroup(8, 15, 64, 7, 4, Utils.RandomRangeI(6,9)+TimeCount9,4+TimeCount/6);
      Podkrkn := Actions.GiveGroup(8, 16, 64, 7, 4, Utils.RandomRangeI(2,6)+TimeCount9,4+TimeCount/6);
      Actions.GroupOrderLink(Podkr,Podkrkn);

      Group1 := Actions.GiveGroup(8, 15, 114, 105, 7, Utils.RandomRangeI(6,9)+TimeCount9,4+TimeCount/6);
      Group2 := Actions.GiveGroup(8, 16, 114, 105, 7, Utils.RandomRangeI(2,6)+TimeCount9,4+TimeCount/6);
      Actions.GroupOrderLink(Group1,Group2);

      Group3 := Actions.GiveGroup(8, 15, 199, 21, 6, Utils.RandomRangeI(6,9)+TimeCount9,4+TimeCount/6);
      Group4 := Actions.GiveGroup(8, 16, 199, 21, 6, Utils.RandomRangeI(2,6)+TimeCount9,4+TimeCount/6);
      Actions.GroupOrderLink(Group3,Group4);
      DiedUnits2 := 0;
      Flag0:= Flag0 + 1;
      end else
      if PXS = 3 then
      begin
      Podkr := Actions.GiveGroup(8, 15, 93, 14, 6, Utils.RandomRangeI(6,9)+TimeCount9,4+TimeCount/6);
      Podkrkn := Actions.GiveGroup(8, 16, 93, 14, 6, Utils.RandomRangeI(2,6)+TimeCount9,4+TimeCount/6);
      Actions.GroupOrderLink(Podkr,Podkrkn);

      Group1 := Actions.GiveGroup(8, 15, 113, 100, 7, Utils.RandomRangeI(6,9)+TimeCount9,4+TimeCount/6);
      Group2 := Actions.GiveGroup(8, 16, 113, 100, 7, Utils.RandomRangeI(2,6)+TimeCount9,4+TimeCount/6);
      Actions.GroupOrderLink(Group1,Group2);

      Group3 := Actions.GiveGroup(8, 15, 58, 7, 4, Utils.RandomRangeI(6,9)+TimeCount9,4+TimeCount/6);
      Group4 := Actions.GiveGroup(8, 16, 58, 7, 4, Utils.RandomRangeI(2,6)+TimeCount9,4+TimeCount/6);
      Actions.GroupOrderLink(Group3,Group4);
      DiedUnits2 := 0;
      Flag0:= Flag0 + 1;
      end;
  end;

  begin
    case States.MissionDifficulty of
     mdHard3:
      begin
        begin
         for I:= 0 to 27 do
         if (States.UnitType(aUnitID) = I) and (States.UnitOwner(aUnitID) = 0) and (PlayerUnits > 0) then
          PlayerUnits:= PlayerUnits - 1;
        end;




      end;
    end;
  end;

end;


procedure OnUnitWounded(aUnit: Integer; aAttacker: Integer);
var
F: Integer;
begin

 begin
  case States.MissionDifficulty of
    mdHard3:
     begin

      begin
        for F:= 14 to 27 do
         if (States.UnitType(aUnit) = F) and (States.UnitOwner(aUnit) = 3) and (States.UnitOwner(aAttacker) = 0) then
           if States.GameTime mod 10 = 0 then
           if Utils.RandomRangeI(1,100) <= 10 then
           begin
            Actions.UnitHPChange(aUnit, 1);
           end;
      end;


     begin
       for F:= 14 to 27 do
         if (States.UnitType(aUnit) = F) and (States.UnitOwner(aUnit) = 7) and (States.UnitOwner(aAttacker) = 0) then
          if States.GameTime mod 10 = 0 then
          if Utils.RandomRangeI(1,100) <= 10 then
          begin
            Actions.UnitHPChange(aUnit, 1);
          end;
     end;

    end;

  end;
 end;

end;

procedure OnHouseDamaged(aHouse: Integer; aAttacker: Integer);
var
H: Integer;
begin

  case States.MissionDifficulty of
  mdHard3:


         begin
         for H:= 0 to 29 do
           if (States.HouseType(aHouse) = H) and (States.HouseOwner(aHouse) = 0) and (States.UnitOwner(aAttacker) = 8) then
           begin
            Actions.HouseAddDamage(aHouse, Utils.RandomRangeI(8,18));
           end;
         end;

 end;

end;


procedure OnTick;
var
TT: Integer;
storeschoolPos: TKMPoint;
storehousePos: TKMPoint;
barracksPos: TKMPoint;
begin

if Length(Schoolhouses) > 0 then
  begin
  storeschoolPos.X:= States.HousePositionX(Schoolhouses[0]);
  storeschoolPos.Y:= States.HousePositionY(Schoolhouses[0]);
  end;
if Length(Storehouses) > 0 then
  begin
  storehousePos.X:= States.HousePositionX(Storehouses[0]);
  storehousePos.Y:= States.HousePositionY(Storehouses[0]);
  end;
if Length(Barracks) > 0 then
  begin
  barracksPos.X:= States.HousePositionX(Barracks[0]);
  barracksPos.Y:= States.HousePositionY(Barracks[0]);
  end;

                    begin
                          if (L1 >= 1) or (L3 >= 1) and (Lim = 1) and (J = 0) then
                          begin
                           J:= J + 1;
                           JT:= (States.GameTime + 330);
                           L1:= 0;
                           L3:= 0;
                           Actions.GroupOrderWalk(Podkr,10,22,4);
                           Actions.GroupOrderWalk(Podkrkn,13,20,4);
                          end else
                          if (L1 >= 1) or (L3 >= 1) and (Lim = 2) and (J = 0) then
                          begin
                           J:= J + 1;
                           JT:= (States.GameTime + 340);
                           L1:= 0;
                           L3:= 0;
                           Actions.GroupOrderWalk(Podkr,66,25,4);
                           Actions.GroupOrderWalk(Podkrkn,64,23,4);
                          end else
                          if (L1 >= 1) or (L3 >= 1) and (Lim = 3) and (J = 0) then
                          begin
                           J:= J + 1;
                           JT:= (States.GameTime + 500);
                           L1:= 0;
                           L3:= 0;
                           Actions.GroupOrderWalk(Podkr,105,31,5);
                           Actions.GroupOrderWalk(Podkrkn,103,29,5);
                          end;
                     end;

                     begin
                          if (L2 >= 1) or (L4 >= 1) and (Lim = 1) and (J = 0) then
                          begin
                           J:= J + 1;
                           JT:= (States.GameTime + 460);
                           L2:= 0;
                           L4:= 0;
                           Actions.GroupOrderWalk(Podkr,4,104,4);
                           Actions.GroupOrderWalk(Podkrkn,4,104,4);
                          end else
                          if (L2 >= 1) or (L4 >= 1) and (Lim = 2) and (J = 0) then
                          begin
                           J:= J + 1;
                           JT:= (States.GameTime + 360);
                           L2:= 0;
                           L4:= 0;
                           Actions.GroupOrderWalk(Podkr,86,57,4);
                           Actions.GroupOrderWalk(Podkrkn,86,57,4);
                          end else
                          if (L2 >= 1) or (L4 >= 1) and (Lim = 3) and (J = 0) then
                          begin
                           J:= J + 1;
                           JT:= (States.GameTime + 750);
                           L2:= 0;
                           L4:= 0;
                           Actions.GroupOrderWalk(Podkr,119,5,5);
                           Actions.GroupOrderWalk(Podkrkn,119,5,5);
                          end;
                     end;

                    if (JT = States.GameTime - 1) or (TT = States.GameTime - 1)  and (States.UnitOwner(Podkrkn) = 3) or (States.UnitOwner(Podkr) = 3) then
                    begin
                    Actions.GroupOrderHalt(Podkrkn);
                    Actions.GroupOrderHalt(Podkr);
                     Pos.X:= 0;
                     Pos.Y:= 0;
                    end;

                    if JT = States.GameTime then
                     begin
                     Actions.AIAttackAdd(3, true, 10, 1, 0, 0, 0, 1, false, attClosestBuildingFromStartPos, Pos);
                     At:= States.GameTime + 2400;
                     FlagAt:= FlagAt + 1;
                     end;

                    if (JT = JT + 30) or (TT = TT + 30) then
                    J:= 0;



      if (At = States.GameTime) and (FlagAt >= 1) then
      begin
      FlagAt := 0;
      Actions.AIAttackRemoveAll(3);
      JT:= 0;
      end;

      begin
           if (States.GameTime = (33000+2700*Time)) then
           begin
           Time:= Time + 1;
           TimeCount:= TimeCount + 1;
           end;

           if (States.GameTime = (54600+7200*Time9)) then
           begin
           Time9:= Time9 + 1;
           TimeCount9:= TimeCount9 + 1;
           end;
      end;

      begin

           if (Time1 > 0) and (States.PlayerVictorious(0) = false) and (States.GameTime >= 23200) then
                Time1:= Time1 - 1;

      end;
      begin
           if States.GameTime = 50 then
                Actions.ShowMsg(0, '<$0>');
           if States.GameTime = 22200 then
                Actions.ShowMsg(0, '<$1>');
      end;

      begin
           if (States.GameTime >= 23200) and (ReinforcementT = 0) then
                Actions.OverlayTextSet(-1,'<$2>: '+ '[$6BFAF1]'+ Utils.TimeToString(Time1) +'[$ffffff]');
           if (Time1 = 0) and (ReinforcementT = 1) then
                Actions.OverlayTextSet(-1,' ');
      end;

      begin
           if (Time1 = 0) and (ReinforcementT = 0) then
        begin
                Group1:= Actions.GiveGroup(0, 19, 53, 103, 0, 6, 3);
                Group2:= Actions.GiveGroup(0, 20, 71, 104, 0, 4, 2);
                Group3:= Actions.GiveGroup(0, 19, 62, 104, 0, 4, 3);
                Actions.GroupOrderWalk(Group1, 53, 46, 0);
                Actions.GroupOrderWalk(Group2, 79, 99, 2);
                Actions.GroupOrderWalk(Group3, 78, 66, 2);
                ReinforcementT:= ReinforcementT + 1;
        end;
      end;

      begin
       if (Flag0 > 0) and (Length(Schoolhouses) > 0) and (Flag1 = 0) then
       begin
       Actions.AIAttackAdd(8, true, 0, 1, 0, 0, 0, 0, true, attCustomPosition, storeschoolPos);
       Flag0:= 0;
       Flag1:= Flag1 + 1;
       end else
       if (Flag0 > 0) and (Length(Storehouses) > 0) and (Flag1 = 0) then
       begin
       Actions.AIAttackAdd(8, true, 0, 1, 0, 0, 0, 0, true, attCustomPosition, storehousePos);
       Flag0:= 0;
       Flag1:= Flag1 + 1;
       end else
       if (Flag0 > 0) and (Length(Barracks) > 0) and (Flag1 = 0) then
       begin
       Actions.AIAttackAdd(8, true, 0, 1, 0, 0, 0, 0, true, attCustomPosition, barracksPos);
       Flag0:= 0;
       Flag1:= Flag1 + 1;
       end;
      end;


      if (States.StatArmyCount(8) > 0) and (Flag1 = 1) then
      Flag0:= Flag0 + 1;

      begin
      Pos.X:= 0;
      Pos.Y:= 0;

  end;

   case States.MissionDifficulty of
    mdHard3:
     begin

       begin

           if (States.GameTime > 0) and (States.GameTime < 23200) then
             Actions.OverlayTextSet(-1, '|<$3>: ' + IntToStr(PlayerUnits) + '/1000');

           if (States.GameTime >= 23200) and (ReinforcementT = 0) then
                Actions.OverlayTextSet(-1, '|<$3>: ' + IntToStr(PlayerUnits) + '/1000' + '|<$2>: '+ '[$6BFAF1]'+ Utils.TimeToString(Time1) +'[$ffffff]');
           if (Time1 = 0) and (ReinforcementT = 1) then
                Actions.OverlayTextSet(-1,'|<$3>: ' + IntToStr(PlayerUnits) + '/1000');
       end;

       begin
       if PlayerUnits = 0 then
        Actions.PlayerDefeat(0);
       end;


    end;
  end;
end;
