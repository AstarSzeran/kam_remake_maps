
const
PLAYER = 0;

{$I HKS_Functions.script}

var
	WARES: array [1..13] of integer;
	WaresNeeded : set of Byte;
	AttackingPos : TKMPoint;
	AttackingDir, CitizinsCNT : Integer;
//GATHER
function GetRandomPositionsInRadius(NumberOfPositions, Radius : Integer; Pos : TKMPoint) : array of TKMPoint;
var I, J : integer;
	aX,aY : Integer;
begin
	
	for I := 0 to NumberOfPositions - 1 do
	begin
	
		aX := S.KaMRandomI( (Radius * 2) + 1 ) - Radius + Pos.X; 
		aY := S.KaMRandomI( (Radius * 2) + 1 ) - Radius + Pos.Y; 
		J := Length(Result);
		SetLength(Result, J + 1);
		Result[J].X := aX;  
		Result[J].Y := aY;
	end;

end;


function WareTypeToQuestCount(aType: integer): integer;
begin
	Case States.MissionDifficulty() of
		0:  case aType of
			10: RESULT := 85;
			13: RESULT := 120;
			8: RESULT := 95;
			1: RESULT := 115;
			else RESULT := 0; 
			end;
		1..2:  case aType of
			8: RESULT := 80;
			10: RESULT := 85;
			13: RESULT := 100;
			else RESULT := 0; 
			end;
		3..5:  case aType of
			1: RESULT := 115;
			8: RESULT := 95;
			9: RESULT := 62;
			10: RESULT := 97;
			13: RESULT := 144;
			else RESULT := 0; 
			end;
		5..7:  case aType of
			1: RESULT := 155;
			8: RESULT := 115;
			9: RESULT := 89;
			10: RESULT := 123;
			11: RESULT := 64;
			13: RESULT := 166;
			else RESULT := 0; 
			end;
	end;
	If RESULT > 0 then 
	RESULT := RESULT div 2;
end;


procedure MakeAttack(aCount : Integer);
var I, K, aDir : Integer;
	aPos : TKMPoint;
	aPoses : array of TKMPoint;
begin
	aDir := AttackingDir;
	aPos := AttackingPos;
	aPoses := GetRandomPositionsInRadius(aCount, 10, aPos);
	if Length(aPoses) = 0 then 
		Exit;
	
	for I := 0 to high(aPoses) do
		A.GiveGroup(1, 23, aPoses[I].X, aPoses[I].Y, aDir, 8 + S.KaMRandomI(5), 4);
	
end;


Procedure OnMarketTrade(aMarket: Integer; aFrom: Integer;  aTo: Integer);
begin

	if (States.HouseOwner(aMarket) = 0) and (aFrom = 27) and not (aTo = 1) then
		Actions.GiveWares(0,aFrom,1);
	//If aTo in WaresNeeded then 
	//	case aTo of
	//	end;
end;

procedure OnHouseWareCountChanged(aHouse : integer; aWare : TKMWareType; aCnt, aChangeCnt : integer);
var 
  wareInt: Byte;
begin
	If States.HouseTypeEx(aHouse) <> htMarket then 
		Exit;
    
  wareInt := WareTypeToInt(aWare);
	If wareInt in WaresNeeded then
		If aChangeCnt > 0 then
      WARES[wareInt] := WARES[wareInt] + aChangeCnt;
end;

Procedure OnHouseDestroyed(aHouse: Integer; aDestroyerIndex: Integer);
begin
if (aDestroyerIndex = 0) and (States.HouseOwner(aHouse) > 0) then
	Actions.GiveWares(aDestroyerIndex,1,1);
	Actions.GiveWares(aDestroyerIndex,2,1);
end;

procedure AutoFeed;
var K, I: Integer;
UnitsToFeed: array of Integer;
begin
	for I := 0 to 7 do 
	begin
		UnitsToFeed := States.PlayerGetAllUnits(I);
		for K := 0 to length(UnitsToFeed) - 1 do 
			Actions.UnitHungerSet(UnitsToFeed[K], States.UnitMaxHunger);
		
	end; 
end;
	   
Procedure Deposits;
var H,X,Y:Integer;
	J : array of integer;
begin	
	J := States.PlayerGetAllHouses(0);
	for H := 0 to length(J) -1 do begin
		If (States.HouseType(J[H])= 3) or  (States.HouseType(J[H])= 4) or  (States.HouseType(J[H])= 5) then begin
			X:=States.HousePositionX(J[H]);
			Y:=States.HousePositionY(J[H]);
			
			If (States.HouseType(J[H])= 3) and (States.MapTileType(X,Y)<>155) then //węgiel
				Actions.MapTileSet(X,Y,155,0)
			else				
			If (States.HouseType(J[H])= 4) and (States.MapTileType(X,Y-2)<>151) then //żelazo
				Actions.MapTileSet(X,Y-2,151,0)
			else				
			If (States.HouseType(J[H])= 5) and (J[H] <> States.HouseAt(31,87)) and (J[H] <> States.HouseAt(41,72)) and (States.MapTileType(X,Y-2)<>147) then //złoto
				Actions.MapTileSet(X,Y-2,147,0);
		end;
	end;
end;
	   // 									CO ROBIC
	   
	   
procedure ShowMissionObjectives(aPlayer: integer);
var j: integer;
	canWin : Boolean;
begin
	canWin := true;
	Actions.OverlayTextAppend(aPlayer, '||<$7>');
	Actions.OverlayTextAppend(aPlayer, '|');
	for j:= 1 to 13 do begin
		if WareTypeToQuestCount(j) > 0 then begin
			if WARES[j] >= WareTypeToQuestCount(j) then
				Actions.OverlayTextAppendFormatted(aPlayer, '<$9>', [States.WareTypeName(j)])
			else
			begin
				Actions.OverlayTextAppendFormatted(aPlayer, '<$8>', [States.WareTypeName(j), WARES[j], WareTypeToQuestCount(j)]);
				canWin := false;
			end;
			Actions.OverlayTextAppend(aPlayer, '|');
		end;
	end;
	If canWin then 
		A.PlayerWin([aPlayer], true);
	If S.StatCitizenCount(0) < CitizinsCNT div 2 then 
		A.PlayerDefeat(0);
end;


	   // 									ON TICK
procedure OnTick;
begin
	OnTickHero;
	
	If S.GameTime > aTimeToReset then
		if ( States.GameTime mod 10 = 0 ) then
			ShowMissionObjectives(PLAYER);
	
	If States.GameTime mod 10 = 0 then 
		Deposits;
	If S.GameTime = 400 then
		A.GroupOrderWalk(S.UnitsGroup(aHeros[0].ID), 45, 23, 6);
	If S.GameTime = 32555 then	
		MakeAttack(20);
end;
	   // 									ON MISSION START
procedure OnMissionStart;
var K : Integer;

begin
	SetDMod;
	CitizinsCNT := S.StatCitizenCount(0);
	K := S.KaMRandomI(4);
	Case K of
		0:AttackingPos := U.KMPoint(95, 16);//pn
		1:AttackingPos := U.KMPoint(237, 91);//wsch
		2:AttackingPos := U.KMPoint(15, 56);//zch
		3:AttackingPos := U.KMPoint(78, 130);//pd
	end;
	Case K of
		0:AttackingDir := 4;
		1:AttackingDir := 6;
		2:AttackingDir := 2;
		3:AttackingDir := 1;
	end;
	
	
	Case States.MissionDifficulty() of
		0: WaresNeeded := [1,8,10,13];
		1..2: WaresNeeded := [8,10,13];
		3..5: WaresNeeded := [1,8,9,10,13];
		5..7: WaresNeeded := [1,8,10,11,13];
	end;
	
	//messages
	aTimeToReset := 200;
	AddOvMessage(0, 20);
	AddOvMessage(16, 300);
	AddOvMessage(17, 350);
	AddMessage(6, 400);
	AddMessage(1, 450);
	AddMessage(18, 900);
	AddMessage(19, 1800);
	AddOvMessage(2, 18000);
	AddOvMessage(3, 18100);
	AddOvMessage(4, 18200);
	AddOvMessage(5, 18300);
	
	Case K of
		0:AddOvMessage(11, 29300);
		1:AddOvMessage(13, 29300);
		2:AddOvMessage(12, 29300);
		3:AddOvMessage(10, 29300);
	end;
	
	AddOvMessage(14, 29400);
	AddOvMessage(15, 29500);
	
	FeedRandomPlayers([0], true,true);
	FillPlayerHouses([0], true);
	AddAutoHeros;
	SetHeroStats(14, 10, 33, 7, 1, 1, hcTyrio);
	
	//RaisGroup(S.GroupAt(116,49), 15);
	//RaisPlayerArmy(0, 3);
end;